// 高性能网络库的实现基础
// 1.高性能网络库基于事件循环实现，逐步增加功能形成网络库。
// 2.高性能服务器的性能表现包括吞吐量大和延时低，同时资源使用率低。
// 高性能服务器的影响性能因素
// 1.上下文切换：线程切换和进程切换导致环境保存和加载，开销大。
// 2.系统调用：用户态到内核态的切换，开销大。
// 3.锁：申请不到锁时会休眠，导致上下文切换。
// 4.内存拷贝：数据量大时开销大，尽量避免内存拷贝。
// 5.多线程多进程：利用并发程序提高处理请求的并发能力。
// 流媒体服务器的特点
// 1.长链接：流媒体服务器保持连接以获取数据。
// 2.并发量大：万兆网卡和2.5兆码率测试，理论并发量约为3200。
// 3.数据量大：网卡百分之八十的能力，每秒发送1G的数据。
// 4.平均延时低：用户体验重要，延时高会导致卡顿、花瓶、丢帧。
// 网络库的抽象
// 1.网络库负责接收和发送数据。
// 2.流媒体模块：解析流媒体协议。
// 3.直播业务模块：处理直播业务。
// 网络库的功能
// 1.事件循环：包括IO事件监听和处理。
// 2.任务执行：任务入队和执行。
// 3.定时任务：实现局部的定时任务，使用高性能时间轮。
// IO模型和线程池的选择
// 1.IO模型：选用同步IO模型，具体实现为IO复用模型。
// 2.Theat模式：主线程监听事件，工作线程处理事件。
// 3.线程池：提高并发能力，每个线程是一个单独的事件循环。
// 网络库的优化
// 1.事件在一个线程内循环，减少线程切换。
// 2.减少锁的使用，避免资源竞争。
// 3.减少IO调用：通过聚集写和分散读减少IO调用。
// 4.减少内存拷贝：网络库只保存地址和长度，避免数据拷贝。
// 事件循环EventLoop 的实现
// 1.特性：一个线程只有一个事件循环，事件循环运行在线程中。
// 2.成员变量：包括标识、epoll实例句柄、epoll事件、线程局部变量。
// 3.成员函数：loop和exit。
// 4.实现：监听IO就绪事件，调用IO处理函数处理读和写。
// 网络库的目录结构
// 1.base目录：基础函数和打印定义。
// 2.near目录：网络库的功能。
// 3.macro定义：打印宏和TMSbasic使用。

#pragma once


#include "base/LogStream.h"

using namespace tmms::base;


#define NETWORK_TRACE LOG_TRACE
#define NETWORK_DEBUG LOG_DEBUG
#define NETWORK_INFO LOG_INFO
#define NETWORK_WARN LOG_WARN
#define NETWORK_ERROR LOG_ERROR

